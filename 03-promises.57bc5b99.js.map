{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,SAASQ,EAAiBT,EAAUC,EAAOS,GACrCA,EACFC,EAAAd,GAASe,OAAOC,QAAQ,uBAAwCC,OAAfd,EAAS,QAAYc,OAANb,EAAM,MAAK,CACvED,SAAQ,WACVe,QAAS,MAGXJ,EAAAd,GAASe,OAAOI,QAAQ,sBAAqCF,OAAfd,EAAS,QAAYc,OAANb,EAAM,MAAK,CACtED,SAAU,WACVe,QAAS,K,CA4CFE,SAASC,cAAc,SAC/BC,iBAAiB,UAxCtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCO,EAAQC,OAAOJ,EAAWK,OAC1BC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAElC,GAAIC,EAAO,GAAKH,EAAQ,GAAKI,GAAU,EACrClB,EAAAd,GAASe,OAAOI,QAAQ,uBAAwB,CAC9ChB,SAAU,WACVe,QAAS,UAHb,CAUA,IAFA,IAAIe,EAAeL,EAEVM,EAAI,EAAGA,GAAKF,EAAQE,IAC3BhC,EAAcgC,EAAGD,GACdE,MAAK,SAAAC,GACJxB,EADewB,EAARjC,SAAeiC,EAALhC,OACiB,E,IAEnCiC,OAAM,SAAAD,GACLxB,EADgBwB,EAARjC,SAAeiC,EAALhC,OACgB,E,IAGtC6B,GAAgBF,EAIlBN,EAAWK,MAAQ,GACnBJ,EAAUI,MAAQ,GAClBH,EAAYG,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction showNotification(position, delay, isFulfilled) {\n  if (isFulfilled) {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n      position: 'topRight',\n      timeout: 2000,\n    });\n  } else {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n      position: 'topRight',\n      timeout: 2000,\n    });\n  }\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if (step < 0 || delay < 0 || amount <= 0) {\n    Notiflix.Notify.failure('Invalid input values', {\n      position: 'topRight',\n      timeout: 2000,\n    });\n    return;\n  }\n\n  let currentDelay = delay;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        showNotification(position, delay, true);\n      })\n      .catch(({ position, delay }) => {\n        showNotification(position, delay, false);\n      });\n\n    currentDelay += step;\n  }\n\n  // Reset input fields after promises are created\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n}\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleSubmit);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$showNotification","isFulfilled","$parcel$interopDefault","Notify","success","concat","timeout","failure","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay1","Number","value","step","amount","currentDelay","i","then","param","catch"],"version":3,"file":"03-promises.57bc5b99.js.map"}